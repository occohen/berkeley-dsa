Stacks
What are they? Data structures
LIFO - last in, first out
Can be implemented using either arrays or linked lists
Applicatons:
*function calls
*undo/redo reature
*browser navigation
*storage of temp data
Array is the container
Capacity is the max number of elements in the stack
Top = top of the stack (-1 in an empty stack)
Operations:
*Push = add element to the top of the stack
*Pop = get and remove the element at the top (returns the element being removed)
*Peek = get the element at the top
*Count = count number of elements in the stack
Push, Pop, Peek, Count/size are all O(1)

Static Stack limitations
Same as static arrays
*capacity is fixed
*allocating too much memory is wasteful
*allocating too little makes us limited
Dynamic Stacks = stacks without a fixed capacity
Usually implemented with dynamic array
Capacity is checked every time an operation that modifies count is used
Capacity is then adjusted if required
For dynamic:
Push, pop have worst case O(n) in dynamic stacks

Example:
Actions can be elements of a stack, such as:
- Create new doc
- Copy doc
- Rename doc
- Delete doc
Popping actions can be "undoing" them
When we add to a stack, it adds "in order"
push 1, then 2, then 3 would give
1,2,3
Then when we pop, it will pop 3 first, then 2, then 1 LAST IN FIRST OUT = When you put something in it goes last, when you take something out it comes from the first

Queues
Similar to stacks
FIFO - first in, first out
Can be implemented using arrays or linked lists
Similar to queues in real life, first come first serve, people that join are added to the end of the queue
Scheduling (knowing when to do each task) -- printer tasks, web server tasks, etc..
Array - container
Capacity - max elements in queue
Front - front of the queue
Count - # of elem in queue
Operations:
*enqueue = add element to the back
*dequeue = get and remove element at the front
*peek = get the element at the front
*count = get number of elements
All are O(1)
Limitations:
*capacity is fixed
*allocating too much memory is wasteful
*allocating too little makes us limited

Dynamic Queues = queues without a fixed capacity
Usually implemented with a dynamic array
Check capacity after we do anything that could alter count
When calling enqueue, if count >= capacity:
-allocate double the capacity of current array
-copy contents of current array to new array
  -starting from front until count
-point to new array
-set front to 0

Deque
Double ended Queue
Elements can be added/deleted from either end
Operations: 
*peek left/right
*pop left/right
*append left/right
All are still O(1)

Recursion
Function that calls itself to solve a smaller, but identical, problem
Breaks down complex problems into simple ones
Example: factorial
Two types of recursion: naive and tail recursion
Naive:
-straightforward and simple implementation of recursion
-useful in understating and solving problems; i.e. breaking them down
-uses a top-down approach. start at the original problem, and break it down from there
-not the most efficient code
There exists two cases: the base case (or simplest case) and the recursive case
Base case should terminate to prevent infinite looping/recursion
Recursive case contains a recursive call to its own function
Build your recursive case so that it approaches the base case eventually
If you don't reach base case, CODE WILL BREAK. This is a runtime error.
Iteration VS Recursion (think while/for loop vs recursive calls)
-Every single interative algorithm can be made into a recursive algorithm
-Iteration is generally more efficient, uses less space
-Recursion is more elegant, with shorter code. It is also easier to understand

Example recursion. Very simple!
find GCD (a,b)
if b==0
   return a
else:
   return GCD(a, a%b)
Same example, iterative version. Also simple, but its not always this simple. Usually, recursive is much easier to write. 
find GCD(a,b)
while b!= 0:
   a,b = b, a%b
   return a

Call Stack
Memory location where data in function calls (stack frames) are placed
Uses stack as a data structure
*only the last stack frame is active at a time
Call Stack Process:
- call func
- push stack frame into stack
- process function
- pop stack frame
Contents of stack frame:
-function parameters
-local vars
-return address
When we have recursive functions (such as factorial) we need to get the result of the last one
So, factorial(6) will do
fact(1) first, then pass that val into fact(2) until eventually we get to fact(6)
we can't do fact(6) first without doing the fact(1) etc..
this is a stack.

Call stack has O(n) space complexity
Maximum n is determined by operating system and/or programming language
if n is very large, performance degradation can occur
each function call adds to the call stack, even if the function doesn't explicity create new data
Stack overflow = call stack doesn't have enough space or reaches the limit
Usually caused by a function not reaching the base case, or n being far too big


Tail recursion
Special type of recursion -- also called bottom up
we start with the base case and build up to larger problems
Does not do any additional computation after the recursive call
Still restricted by call stack limits
Stores results as accumulator arguments
Does not need to preserve the stack frame
Uses O(1) space in the call stack (as opposed to O(n))
Optimized by the compiler
Results in faster execution

Harder to write than naive recursion
Uses extra parameters for calculations called accumulators
No need to calculate return values
Returns accumulator value at the end
Naive -> tail recursion conversion
- add accumulator parameters
- return accumulator in base case
- include accumulator in recursive call
   - perform any neccessary calcs to the accumulator

